/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.datediff;

import java.awt.Color;
import java.text.DateFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.text.ParseException;
import java.util.*;
import javax.swing.JTextField;
import jonelo.sugar.gui.GeneralGUI;
import net.numericalchameleon.categories.CategoryInterface;
import net.numericalchameleon.categories.CategoryObject;
import net.numericalchameleon.categories.CategoryTimezones;
import net.numericalchameleon.data.Unit;
import net.numericalchameleon.gui.dialogs.calendarchooser.CalendarChooserDialog;
import net.numericalchameleon.gui.dialogs.calendarchooser.CalendarChooserPayload;
import net.numericalchameleon.gui.dialogs.timechooser.TimeChooserDialog;
import net.numericalchameleon.gui.dialogs.timechooser.TimeChooserPayload;
import net.numericalchameleon.gui.main.Main;
import net.numericalchameleon.gui.common.renderer.UnitRecordCellRenderer;
import net.numericalchameleon.util.datediff.ClockThread;
import net.numericalchameleon.util.datediff.Duration;
import net.numericalchameleon.util.datediff.DurationColloquial;
import net.numericalchameleon.util.datediff.DurationControl;
import net.numericalchameleon.util.datediff.zinstage.*;
import net.numericalchameleon.util.misc.ModelHelperNC;

public class DateDiffDialog extends javax.swing.JDialog implements CategoryInterface {

    private ResourceBundle rb;
    private boolean[] status;
    private long[] secs;
    private DateFormat aFormatter;
    private DateFormat bFormatter;
    private GregorianCalendar aMoment;
    private GregorianCalendar bMoment;
    private UnitRecordCellRenderer renderer = null;
    private CategoryObject clusterObject;
    private Zinstage zt;
    private TimeZone utc;
    private DurationColloquial durationColloquialBackup;
    private DateDiffDialogInterface dialogInterface;
    private final static NumberFormat formatter = new DecimalFormat("0.############");
    private final static int DATE_CHOOSER = 0;
    private final static int TIME_CHOOSER = 1;
    
    
    /**
     * Creates new form DateDiff
     * @param parent
     * @param modal
     */
    public DateDiffDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    public DateDiffDialog(DateDiffDialogInterface dialogInterface, UnitRecordCellRenderer renderer, long[] secs, boolean[] status) {
        super(dialogInterface.getFrame(), false);
        this.dialogInterface = dialogInterface;
        this.rb = dialogInterface.getResourceBundle();
        this.renderer = renderer;
        this.status = status;
        this.secs = secs;

        utc = TimeZone.getTimeZone("UTC");
        aMoment = new GregorianCalendar(); // initialize with default timezone
        bMoment = (GregorianCalendar) aMoment.clone(); // must be the same time to avoid minimal differences

        aFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
        aFormatter.setLenient(false);
        //aFormatter.setTimeZone(utc);

        bFormatter = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);
        bFormatter.setLenient(false);
        //bFormatter.setTimeZone(utc);

        clusterObject = new CategoryTimezones(this);
        initComponents();

        setSelectedTimezoneForaMoment();
        setSelectedTimezoneForbMoment();
        aTextFieldKeyReleased(null);
        bTextFieldKeyReleased(null);

        updateAllPanels();
        setLocationRelativeTo(dialogInterface.getFrame());
        pack();
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jumboPanel = new javax.swing.JPanel();
        aLabel = new javax.swing.JLabel();
        aTextField = new javax.swing.JTextField();
        aDatePickerButton = new javax.swing.JButton();
        aTimePickerButton = new javax.swing.JButton();
        aDSTLabel = new javax.swing.JLabel();
        aTimeZoneComboBox = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        bLabel = new javax.swing.JLabel();
        bTextField = new javax.swing.JTextField();
        bTimeZoneComboBox = new javax.swing.JComboBox();
        bTimePickerButton = new javax.swing.JButton();
        bDSTLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        bDatePickerButton = new javax.swing.JButton();
        locationSwitchButton = new javax.swing.JButton();
        aTimeZoneLabel = new javax.swing.JLabel();
        bTimeZoneLabel = new javax.swing.JLabel();
        signLabel = new javax.swing.JLabel();
        relationshipLabel = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        exactPanel = new javax.swing.JPanel();
        daysTextField = new javax.swing.JTextField();
        hoursTextField = new javax.swing.JTextField();
        minutesTextField = new javax.swing.JTextField();
        secondsTextField = new javax.swing.JTextField();
        leapSecondsCheckBox = new javax.swing.JCheckBox();
        daysCheckBox = new javax.swing.JCheckBox();
        hoursCheckBox = new javax.swing.JCheckBox();
        minutesCheckBox = new javax.swing.JCheckBox();
        secondsCheckBox = new javax.swing.JCheckBox();
        weeksCheckBox = new javax.swing.JCheckBox();
        weeksTextField = new javax.swing.JTextField();
        ugsPanel = new javax.swing.JPanel();
        collCenturiesCheckBox = new javax.swing.JCheckBox();
        collCenturiesTextField = new javax.swing.JTextField();
        collDecadesCheckBox = new javax.swing.JCheckBox();
        collDecadesTextField = new javax.swing.JTextField();
        collYearsCheckBox = new javax.swing.JCheckBox();
        collYearsTextField = new javax.swing.JTextField();
        collQuartersCheckBox = new javax.swing.JCheckBox();
        collQuartersTextField = new javax.swing.JTextField();
        collMonthsCheckBox = new javax.swing.JCheckBox();
        collMonthsTextField = new javax.swing.JTextField();
        collWeeksCheckBox = new javax.swing.JCheckBox();
        collWeeksTextField = new javax.swing.JTextField();
        collDaysCheckBox = new javax.swing.JCheckBox();
        collDaysTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        businessPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        zinstageTextField = new javax.swing.JTextField();
        zinstageComboBox = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        ingoreLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(rb.getString("DateDiff.CalculateTimeDifference")); // NOI18N
        setMinimumSize(new java.awt.Dimension(666, 676));

        jumboPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        aLabel.setText(rb.getString("DateDiff.MomentA")); // NOI18N

        aTextField.setText(aFormatter.format(new Date()));
        aTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                aTextFieldKeyReleased(evt);
            }
        });

        aDatePickerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/calendar.png"))); // NOI18N
        aDatePickerButton.setText(rb.getString("GUI.General.DatePicker")); // NOI18N
        aDatePickerButton.setToolTipText(rb.getString("GUI.General.DatePicker")); // NOI18N
        aDatePickerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aDatePickerButtonActionPerformed(evt);
            }
        });

        aTimePickerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/time.png"))); // NOI18N
        aTimePickerButton.setText(rb.getString("GUI.General.TimePicker")); // NOI18N
        aTimePickerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aTimePickerButtonActionPerformed(evt);
            }
        });

        aDSTLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/dst.png"))); // NOI18N
        aDSTLabel.setText(rb.getString("DateDiff.DST")); // NOI18N

        aTimeZoneComboBox.setMaximumRowCount(12);
        aTimeZoneComboBox.setModel(ModelHelperNC.getComboBoxModel(clusterObject.getSourceUnits()));
        aTimeZoneComboBox.setSelectedIndex(clusterObject.getSourceDefault());
        aTimeZoneComboBox.setRenderer(renderer);
        aTimeZoneComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aTimeZoneComboBoxActionPerformed(evt);
            }
        });
        aTimeZoneComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                aTimeZoneComboBoxComponentResized(evt);
            }
        });

        jLabel1.setText("   ");

        bLabel.setText(rb.getString("DateDiff.MomentB")); // NOI18N

        bTextField.setText(aTextField.getText()); //bFormatter.format(new Date()));
    bTextField.addKeyListener(new java.awt.event.KeyAdapter() {
        public void keyReleased(java.awt.event.KeyEvent evt) {
            bTextFieldKeyReleased(evt);
        }
    });

    bTimeZoneComboBox.setMaximumRowCount(12);
    bTimeZoneComboBox.setModel(ModelHelperNC.getComboBoxModel(clusterObject.getSourceUnits()));
    bTimeZoneComboBox.setSelectedIndex(clusterObject.getSourceDefault());
    bTimeZoneComboBox.setRenderer(renderer);
    bTimeZoneComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            bTimeZoneComboBoxActionPerformed(evt);
        }
    });
    bTimeZoneComboBox.addComponentListener(new java.awt.event.ComponentAdapter() {
        public void componentResized(java.awt.event.ComponentEvent evt) {
            bTimeZoneComboBoxComponentResized(evt);
        }
    });

    bTimePickerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/time.png"))); // NOI18N
    bTimePickerButton.setText(rb.getString("GUI.General.TimePicker")); // NOI18N
    bTimePickerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            bTimePickerButtonActionPerformed(evt);
        }
    });

    bDSTLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/dst.png"))); // NOI18N
    bDSTLabel.setText(rb.getString("DateDiff.DST")); // NOI18N

    jLabel2.setText("   ");

    bDatePickerButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/calendar.png"))); // NOI18N
    bDatePickerButton.setText(rb.getString("GUI.General.DatePicker")); // NOI18N
    bDatePickerButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            bDatePickerButtonActionPerformed(evt);
        }
    });

    locationSwitchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/swap.png"))); // NOI18N
    locationSwitchButton.setText(rb.getString("DateDiff.SwapAB")); // NOI18N
    locationSwitchButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            locationSwitchButtonActionPerformed(evt);
        }
    });

    aTimeZoneLabel.setText(rb.getString("DateDiff.Timezone")); // NOI18N

    bTimeZoneLabel.setText(rb.getString("DateDiff.Timezone")); // NOI18N

    signLabel.setText("sign");

    relationshipLabel.setText(rb.getString("DateDiff.Relationship")); // NOI18N

    javax.swing.GroupLayout jumboPanelLayout = new javax.swing.GroupLayout(jumboPanel);
    jumboPanel.setLayout(jumboPanelLayout);
    jumboPanelLayout.setHorizontalGroup(
        jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jumboPanelLayout.createSequentialGroup()
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jumboPanelLayout.createSequentialGroup()
                    .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(bLabel)
                        .addComponent(bTimeZoneLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jumboPanelLayout.createSequentialGroup()
                            .addComponent(bDatePickerButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bTimePickerButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(bDSTLabel))
                        .addComponent(bTextField)
                        .addComponent(bTimeZoneComboBox, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jumboPanelLayout.createSequentialGroup()
                    .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(aLabel)
                        .addComponent(aTimeZoneLabel))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jumboPanelLayout.createSequentialGroup()
                            .addComponent(aDatePickerButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(aTimePickerButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(aDSTLabel))
                        .addComponent(aTimeZoneComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(aTextField)))
                .addGroup(jumboPanelLayout.createSequentialGroup()
                    .addComponent(relationshipLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(signLabel)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(locationSwitchButton)))
            .addContainerGap())
    );
    jumboPanelLayout.setVerticalGroup(
        jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(jumboPanelLayout.createSequentialGroup()
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(aLabel)
                .addComponent(aTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGap(5, 5, 5)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(aDatePickerButton)
                .addComponent(aTimePickerButton)
                .addComponent(aDSTLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(aTimeZoneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(aTimeZoneLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bLabel)
                .addComponent(bTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bDatePickerButton)
                .addComponent(bTimePickerButton)
                .addComponent(bDSTLabel))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(bTimeZoneLabel)
                .addComponent(bTimeZoneComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel2)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(jumboPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(locationSwitchButton)
                .addComponent(signLabel)
                .addComponent(relationshipLabel))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    exactPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

    daysTextField.setEditable(false);

    hoursTextField.setEditable(false);

    minutesTextField.setEditable(false);

    secondsTextField.setEditable(false);

    leapSecondsCheckBox.setSelected(true);
    leapSecondsCheckBox.setText(rb.getString("DateDiff.TakeLeapSecondsIntoAccount")); // NOI18N
    leapSecondsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    leapSecondsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    leapSecondsCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            leapSecondsCheckBoxItemStateChanged(evt);
        }
    });

    daysCheckBox.setSelected(true);
    daysCheckBox.setText(rb.getString("DateDiff.Days")); // NOI18N
    daysCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    daysCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    daysCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            daysCheckBoxItemStateChanged(evt);
        }
    });

    hoursCheckBox.setSelected(true);
    hoursCheckBox.setText(rb.getString("DateDiff.Hours")); // NOI18N
    hoursCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    hoursCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    hoursCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            hoursCheckBoxItemStateChanged(evt);
        }
    });

    minutesCheckBox.setSelected(true);
    minutesCheckBox.setText(rb.getString("DateDiff.Minutes")); // NOI18N
    minutesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    minutesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    minutesCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            minutesCheckBoxItemStateChanged(evt);
        }
    });

    secondsCheckBox.setSelected(true);
    secondsCheckBox.setText(rb.getString("DateDiff.Seconds")); // NOI18N
    secondsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    secondsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    secondsCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            secondsCheckBoxItemStateChanged(evt);
        }
    });

    weeksCheckBox.setSelected(true);
    weeksCheckBox.setText(rb.getString("DateDiff.Weeks")); // NOI18N
    weeksCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    weeksCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    weeksCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            weeksCheckBoxItemStateChanged(evt);
        }
    });

    weeksTextField.setEditable(false);

    javax.swing.GroupLayout exactPanelLayout = new javax.swing.GroupLayout(exactPanel);
    exactPanel.setLayout(exactPanelLayout);
    exactPanelLayout.setHorizontalGroup(
        exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(exactPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(daysCheckBox)
                .addComponent(hoursCheckBox)
                .addComponent(minutesCheckBox)
                .addComponent(secondsCheckBox)
                .addComponent(weeksCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(leapSecondsCheckBox)
                .addComponent(minutesTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addComponent(hoursTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addComponent(daysTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addComponent(secondsTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE)
                .addComponent(weeksTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 361, Short.MAX_VALUE))
            .addContainerGap())
    );
    exactPanelLayout.setVerticalGroup(
        exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(exactPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(weeksCheckBox)
                .addComponent(weeksTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(daysCheckBox)
                .addComponent(daysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(hoursTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(hoursCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(minutesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(minutesCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(exactPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(secondsCheckBox)
                .addComponent(secondsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(leapSecondsCheckBox)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    exactPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {daysTextField, hoursTextField, minutesTextField, secondsTextField});

    jTabbedPane1.addTab(rb.getString("DateDiff.exact"), new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/diamond.png")), exactPanel); // NOI18N

    collCenturiesCheckBox.setText(rb.getString("DateDiff.Centuries")); // NOI18N
    collCenturiesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    collCenturiesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collCenturiesCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collCenturiesCheckBoxItemStateChanged(evt);
        }
    });

    collCenturiesTextField.setEditable(false);

    collDecadesCheckBox.setText(rb.getString("DateDiff.Decades")); // NOI18N
    collDecadesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
    collDecadesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collDecadesCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collDecadesCheckBoxItemStateChanged(evt);
        }
    });

    collDecadesTextField.setEditable(false);

    collYearsCheckBox.setSelected(true);
    collYearsCheckBox.setText(rb.getString("DateDiff.Years")); // NOI18N
    collYearsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    collYearsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collYearsCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collYearsCheckBoxItemStateChanged(evt);
        }
    });

    collYearsTextField.setEditable(false);

    collQuartersCheckBox.setText(rb.getString("DateDiff.Quarters")); // NOI18N
    collQuartersCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    collQuartersCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collQuartersCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collQuartersCheckBoxItemStateChanged(evt);
        }
    });

    collQuartersTextField.setEditable(false);

    collMonthsCheckBox.setSelected(true);
    collMonthsCheckBox.setText(rb.getString("DateDiff.Months")); // NOI18N
    collMonthsCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    collMonthsCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collMonthsCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collMonthsCheckBoxItemStateChanged(evt);
        }
    });

    collMonthsTextField.setEditable(false);

    collWeeksCheckBox.setSelected(true);
    collWeeksCheckBox.setText(rb.getString("DateDiff.Weeks")); // NOI18N
    collWeeksCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    collWeeksCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collWeeksCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collWeeksCheckBoxItemStateChanged(evt);
        }
    });

    collWeeksTextField.setEditable(false);

    collDaysCheckBox.setSelected(true);
    collDaysCheckBox.setText(rb.getString("DateDiff.Days")); // NOI18N
    collDaysCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
    collDaysCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
    collDaysCheckBox.addItemListener(new java.awt.event.ItemListener() {
        public void itemStateChanged(java.awt.event.ItemEvent evt) {
            collDaysCheckBoxItemStateChanged(evt);
        }
    });

    collDaysTextField.setEditable(false);

    jLabel5.setText(rb.getString("DateDiff.HHmmssAreIgnored")); // NOI18N

    javax.swing.GroupLayout ugsPanelLayout = new javax.swing.GroupLayout(ugsPanel);
    ugsPanel.setLayout(ugsPanelLayout);
    ugsPanelLayout.setHorizontalGroup(
        ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ugsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ugsPanelLayout.createSequentialGroup()
                    .addComponent(jLabel5)
                    .addGap(0, 0, Short.MAX_VALUE))
                .addGroup(ugsPanelLayout.createSequentialGroup()
                    .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(collDecadesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collCenturiesCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collYearsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collQuartersCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collMonthsCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collWeeksCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(collDaysCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGap(12, 12, 12)
                    .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(collCenturiesTextField)
                        .addComponent(collDecadesTextField)
                        .addComponent(collMonthsTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addComponent(collQuartersTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addComponent(collWeeksTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addComponent(collDaysTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 341, Short.MAX_VALUE)
                        .addComponent(collYearsTextField, javax.swing.GroupLayout.Alignment.TRAILING))))
            .addContainerGap())
    );
    ugsPanelLayout.setVerticalGroup(
        ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(ugsPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ugsPanelLayout.createSequentialGroup()
                    .addComponent(collCenturiesCheckBox)
                    .addGap(9, 9, 9))
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ugsPanelLayout.createSequentialGroup()
                    .addComponent(collCenturiesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collDecadesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(collDecadesCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collYearsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(collYearsCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collQuartersCheckBox)
                .addComponent(collQuartersTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collMonthsTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(collMonthsCheckBox))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collWeeksCheckBox)
                .addComponent(collWeeksTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(ugsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(collDaysTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(collDaysCheckBox))
            .addGap(8, 8, 8)
            .addComponent(jLabel5)
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab(rb.getString("DateDiff.colloquial"), new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/weather-cloud.png")), ugsPanel); // NOI18N

    businessPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 1, 1, 1));

    jLabel3.setText(rb.getString("DateDiff.DaysBusiness")); // NOI18N

    zinstageTextField.setEditable(false);

    zinstageComboBox.setModel(getZinstageComboBoxModel());
    zinstageComboBox.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            zinstageComboBoxActionPerformed(evt);
        }
    });

    jLabel4.setText(rb.getString("DateDiff.Method")); // NOI18N

    ingoreLabel.setText(rb.getString("DateDiff.HHmmssAreIgnored")); // NOI18N

    javax.swing.GroupLayout businessPanelLayout = new javax.swing.GroupLayout(businessPanel);
    businessPanel.setLayout(businessPanelLayout);
    businessPanelLayout.setHorizontalGroup(
        businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(businessPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(businessPanelLayout.createSequentialGroup()
                    .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel4)
                        .addComponent(jLabel3))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(zinstageComboBox, 0, 355, Short.MAX_VALUE)
                        .addComponent(zinstageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 355, Short.MAX_VALUE)))
                .addComponent(ingoreLabel))
            .addContainerGap())
    );
    businessPanelLayout.setVerticalGroup(
        businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(businessPanelLayout.createSequentialGroup()
            .addContainerGap()
            .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel4)
                .addComponent(zinstageComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(businessPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel3)
                .addComponent(zinstageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(ingoreLabel)
            .addContainerGap(142, Short.MAX_VALUE))
    );

    jTabbedPane1.addTab(rb.getString("DateDiff.business"), new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/bank.png")), businessPanel); // NOI18N

    okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/ok.png"))); // NOI18N
    okButton.setText(rb.getString("GUI.General.Apply")); // NOI18N
    okButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            okButtonActionPerformed(evt);
        }
    });

    cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
    cancelButton.setText(rb.getString("GUI.General.Close")); // NOI18N
    cancelButton.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            cancelButtonActionPerformed(evt);
        }
    });

    jLabel10.setText(rb.getString("DateDiff.TimeDifference")); // NOI18N

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jTabbedPane1)
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(okButton)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(cancelButton)
                    .addContainerGap())
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addComponent(jumboPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(16, 16, 16))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jSeparator1)
                    .addGap(16, 16, 16))
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jLabel10)
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jumboPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jLabel10)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addComponent(jTabbedPane1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(cancelButton)
                .addComponent(okButton))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void leapSecondsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_leapSecondsCheckBoxItemStateChanged
        //refreshExactPanel(secs[0]);
        updateExactPanel();
    }//GEN-LAST:event_leapSecondsCheckBoxItemStateChanged

    private void weeksCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_weeksCheckBoxItemStateChanged
        refreshExactPanel(secs[0]);
    }//GEN-LAST:event_weeksCheckBoxItemStateChanged

    private void secondsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_secondsCheckBoxItemStateChanged
        refreshExactPanel(secs[0]);
    }//GEN-LAST:event_secondsCheckBoxItemStateChanged

    private void minutesCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_minutesCheckBoxItemStateChanged
        refreshExactPanel(secs[0]);
    }//GEN-LAST:event_minutesCheckBoxItemStateChanged

    private void hoursCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_hoursCheckBoxItemStateChanged
        refreshExactPanel(secs[0]);
    }//GEN-LAST:event_hoursCheckBoxItemStateChanged

    private void daysCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_daysCheckBoxItemStateChanged
        refreshExactPanel(secs[0]);
    }//GEN-LAST:event_daysCheckBoxItemStateChanged

    private void bTimePickerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTimePickerButtonActionPerformed
        pickerButtonActionPerformed(TIME_CHOOSER, bTextField, bMoment, bFormatter);
    }//GEN-LAST:event_bTimePickerButtonActionPerformed

    private void bDatePickerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bDatePickerButtonActionPerformed
        pickerButtonActionPerformed(DATE_CHOOSER, bTextField, bMoment, bFormatter);
    }//GEN-LAST:event_bDatePickerButtonActionPerformed

    private void aTimePickerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aTimePickerButtonActionPerformed
        pickerButtonActionPerformed(TIME_CHOOSER, aTextField, aMoment, aFormatter);
    }//GEN-LAST:event_aTimePickerButtonActionPerformed

    private void aDatePickerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aDatePickerButtonActionPerformed
        pickerButtonActionPerformed(DATE_CHOOSER, aTextField, aMoment, aFormatter);
    }//GEN-LAST:event_aDatePickerButtonActionPerformed

    // opens a CalendarChooserDialog or a TimeChooserDialog
    // and updates the textfield and the calendar gc
    private void pickerButtonActionPerformed(int type,
            JTextField textField, GregorianCalendar gc, DateFormat formatter) {

        GregorianCalendar calendar = new GregorianCalendar(formatter.getTimeZone());
        try {
            calendar.setTime(formatter.parse(textField.getText()));
        } catch (ParseException e) {
            System.err.println(e.toString());
        }

        boolean cancelled = true;
        switch (type) {
            case DATE_CHOOSER:
                CalendarChooserPayload payloadCal = new CalendarChooserPayload(calendar, formatter.getTimeZone());
                new CalendarChooserDialog(dialogInterface, payloadCal);
                cancelled = payloadCal.isCancelled();
                break;
            case TIME_CHOOSER:
                TimeChooserPayload payloadTime = new TimeChooserPayload(calendar);
                new TimeChooserDialog(dialogInterface, payloadTime);
                cancelled = payloadTime.isCancelled();
                break;
        }

        if (!cancelled) { // not cancelled
            try {
                textField.setText(formatter.format(calendar.getTime()));
                xTextFieldKeyReleased(textField, gc, formatter);
            } catch (Exception e) {
                System.err.println(e.toString());
            }
        }
    }

    private void locationSwitchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationSwitchButtonActionPerformed
        int a = aTimeZoneComboBox.getSelectedIndex();
        int b = bTimeZoneComboBox.getSelectedIndex();
        if (a != b) {
            aTimeZoneComboBox.setSelectedIndex(b);
            bTimeZoneComboBox.setSelectedIndex(a);
        }
        String tmp = aTextField.getText();
        aTextField.setText(bTextField.getText());
        bTextField.setText(tmp);
        xTextFieldKeyReleased(aTextField, aMoment, aFormatter);
        xTextFieldKeyReleased(bTextField, bMoment, bFormatter);
    }//GEN-LAST:event_locationSwitchButtonActionPerformed

    private void zinstageComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zinstageComboBoxActionPerformed
        updateBusinessPanel();
    }//GEN-LAST:event_zinstageComboBoxActionPerformed

    private javax.swing.ComboBoxModel getZinstageComboBoxModel() {
        Vector v = new Vector();
        v.add(new ZinstageGerman());
        v.add(new ZinstageGerman2());
        v.add(new ZinstageUS());
        v.add(new ZinstageNASD());
        v.add(new ZinstageEnglish());
        v.add(new ZinstageFrench());
        v.add(new ZinstageICMA());
        return GeneralGUI.getComboBoxModel(v);
    }

    private void bTimeZoneComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bTimeZoneComboBoxActionPerformed
        setSelectedTimezoneForbMoment();
        bTextFieldKeyReleased(null);
        updateAllPanels();
    }//GEN-LAST:event_bTimeZoneComboBoxActionPerformed

    private void aTimeZoneComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aTimeZoneComboBoxActionPerformed
        setSelectedTimezoneForaMoment();
        aTextFieldKeyReleased(null);
        updateAllPanels();
    }//GEN-LAST:event_aTimeZoneComboBoxActionPerformed

    private void setSelectedTimezoneForaMoment() {
        StringTokenizer st = new StringTokenizer(((Unit) aTimeZoneComboBox.getSelectedItem()).getString());
        TimeZone tz = TimeZone.getTimeZone(st.nextToken());
        convertCalendarToTimeZone(aTextField.getText(), tz, aMoment, utc);
        aFormatter.setTimeZone(tz);
    }

    private void setSelectedTimezoneForbMoment() {
        StringTokenizer st = new StringTokenizer(((Unit) bTimeZoneComboBox.getSelectedItem()).getString());
        TimeZone tz = TimeZone.getTimeZone(st.nextToken());
        convertCalendarToTimeZone(bTextField.getText(), tz, bMoment, utc);
        bFormatter.setTimeZone(tz);
    }

    private void setUTCTimezoneForaMoment() {
        convertCalendarToTimeZone(aTextField.getText(), utc, aMoment, utc);
        aFormatter.setTimeZone(utc);
    }

    private void setUTCTimezoneForbMoment() {
        convertCalendarToTimeZone(bTextField.getText(), utc, bMoment, utc);
        bFormatter.setTimeZone(utc);
    }

    private void bTimeZoneComboBoxComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_bTimeZoneComboBoxComponentResized
        if (dialogInterface.isResizeComboBoxPopups()) {
            GeneralGUI.resizeComboBoxPopup(bTimeZoneComboBox);
        }
    }//GEN-LAST:event_bTimeZoneComboBoxComponentResized

    private void aTimeZoneComboBoxComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_aTimeZoneComboBoxComponentResized
        if (dialogInterface.isResizeComboBoxPopups()) {
            GeneralGUI.resizeComboBoxPopup(aTimeZoneComboBox);
        }
    }//GEN-LAST:event_aTimeZoneComboBoxComponentResized

    private void convertCalendarToTimeZone(String input, TimeZone fromTimeZone,
            GregorianCalendar toCal, TimeZone toTimeZone) {
        // Create a Calendar object with the source time zone
        DateFormat dateFormat = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.MEDIUM);

        Calendar fromCal = new GregorianCalendar(fromTimeZone);
        dateFormat.setTimeZone(fromTimeZone);
        try {
            fromCal.setTime(dateFormat.parse(input));
        } catch (Exception e) {
            System.err.println(e);
        }

        // Create an instance using target's time zone and set it with the UTC        
        toCal.setTimeZone(toTimeZone);
        toCal.setTimeInMillis(fromCal.getTimeInMillis());
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // we have stored the seconds already in secs[0]
        status[0] = true;
        setVisible(false);
        dialogInterface.releaseDateDiffDialog(status, secs);
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        status[0] = false;
        setVisible(false);
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void bTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_bTextFieldKeyReleased
        xTextFieldKeyReleased(bTextField, bMoment, bFormatter);
    }//GEN-LAST:event_bTextFieldKeyReleased

    private void aTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_aTextFieldKeyReleased
        xTextFieldKeyReleased(aTextField, aMoment, aFormatter);
    }//GEN-LAST:event_aTextFieldKeyReleased

    private void collDaysCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collDaysCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collDaysCheckBoxItemStateChanged

    private void collQuartersCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collQuartersCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collQuartersCheckBoxItemStateChanged

    private void collWeeksCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collWeeksCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collWeeksCheckBoxItemStateChanged

    private void collMonthsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collMonthsCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collMonthsCheckBoxItemStateChanged

    private void collYearsCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collYearsCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collYearsCheckBoxItemStateChanged

    private void collDecadesCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collDecadesCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collDecadesCheckBoxItemStateChanged

    private void collCenturiesCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_collCenturiesCheckBoxItemStateChanged
        refreshColloquialPanel(durationColloquialBackup, evt);
    }//GEN-LAST:event_collCenturiesCheckBoxItemStateChanged

    private void xTextFieldKeyReleased(
            JTextField textField, GregorianCalendar gc, DateFormat formatter) {
        try {
            gc.setTime(formatter.parse(textField.getText()));
            gc.set(Calendar.MILLISECOND, 0);
            textField.setBackground(Color.WHITE);
            updateAllPanels();
        } catch (ParseException e) {
            textField.setBackground(Main.RED);
        }
    }

    private void updateInputPanel() {
        aDSTLabel.setEnabled(aFormatter.getTimeZone().inDaylightTime(aMoment.getTime()));
        bDSTLabel.setEnabled(bFormatter.getTimeZone().inDaylightTime(bMoment.getTime()));

        String label;
        if (aMoment.after(bMoment)) {
            label = "B < A";
        } else if (aMoment.before(bMoment)) {
            label = "A < B";
        } else {
            label = "A = B";
        }
        signLabel.setText(label);
    }

    private void updateBusinessPanel() {
        zt = (Zinstage) zinstageComboBox.getSelectedItem();
        zt.setStart(aMoment);
        zt.setEnd(bMoment);
        zinstageTextField.setText(Integer.toString(zt.calc()));
        zt = null;
    }

    private void updateExactPanel() {
        Duration durationExact = Duration.getDiff(aMoment, bMoment, leapSecondsCheckBox.isSelected());
        refreshExactPanel(durationExact);
        // save the potential return value
        secs[0] = durationExact.getSeconds();
    }

    private void updateColloquialPanel() {
        durationColloquialBackup = DurationColloquial.getDiff(aMoment, bMoment);
        refreshColloquialPanel(durationColloquialBackup, null);
    }

    private void refreshExactPanel(Duration duration) {
        refreshExactPanel(duration.getSeconds());
    }

    private DurationControl getExactDurationControl() {
        DurationControl durationControl = new DurationControl();
        durationControl.setAll(false);
        durationControl.setLeapSecondsWanted(leapSecondsCheckBox.isSelected());
        durationControl.setSecondsWanted(secondsCheckBox.isSelected());
        durationControl.setMinutesWanted(minutesCheckBox.isSelected());
        durationControl.setHoursWanted(hoursCheckBox.isSelected());
        durationControl.setDaysWanted(daysCheckBox.isSelected());
        durationControl.setWeeksWanted(weeksCheckBox.isSelected());
        return durationControl;
    }

    private DurationControl getColloquialDurationControl() {
        DurationControl durationControl = new DurationControl();
        durationControl.setAll(false);
        durationControl.setCenturiesWanted(collCenturiesCheckBox.isSelected());
        durationControl.setDecadesWanted(collDecadesCheckBox.isSelected());
        durationControl.setDaysWanted(collDaysCheckBox.isSelected());
        durationControl.setWeeksWanted(collWeeksCheckBox.isSelected());
        durationControl.setMonthsWanted(collMonthsCheckBox.isSelected());
        durationControl.setQuartersWanted(collQuartersCheckBox.isSelected());
        durationControl.setYearsWanted(collYearsCheckBox.isSelected());

        //durationControl.setDecadesWanted(collDecadesCheckBox.isSelected());
        return durationControl;
    }

    private void refreshExactPanel(long seconds) {
        Duration duration = new Duration();
        duration.setSeconds(seconds);

        DurationControl durationControl = getExactDurationControl();
        duration.rearrange(durationControl);

        secondsTextField.setText(durationControl.isSecondsWanted() ? Long.toString(duration.getSeconds()) : "0");
        minutesTextField.setText(durationControl.isMinutesWanted() ? formatter.format(duration.getMinutes()) : "0");
        hoursTextField.setText(durationControl.isHoursWanted() ? formatter.format(duration.getHours()) : "0");
        daysTextField.setText(durationControl.isDaysWanted() ? formatter.format(duration.getDays()) : "0");
        weeksTextField.setText(durationControl.isWeeksWanted() ? formatter.format(duration.getWeeks()) : "0");
        // check whether we must enable at least one checkbox again
        if (!secondsCheckBox.isSelected()
                && !minutesCheckBox.isSelected()
                && !hoursCheckBox.isSelected()
                && !daysCheckBox.isSelected()
                && !weeksCheckBox.isSelected()) {
            secondsCheckBox.setSelected(true);
        }
    }

    private void refreshColloquialPanel(DurationColloquial durationColloquial, java.awt.event.ItemEvent evt) {
        DurationColloquial dur = (DurationColloquial) durationColloquial.clone();
        DurationControl durationControl = getColloquialDurationControl();
        dur.rearrange(durationControl);

        collCenturiesTextField.setText(durationControl.isCenturiesWanted() ? formatter.format(dur.getCenturies()) : "0");
        collDecadesTextField.setText(durationControl.isDecadesWanted() ? formatter.format(dur.getDecades()) : "0");
        collYearsTextField.setText(durationControl.isYearsWanted() ? formatter.format(dur.getYears()) : "0");
        collQuartersTextField.setText(durationControl.isQuartersWanted() ? formatter.format(dur.getQuarters()) : "0");
        collMonthsTextField.setText(durationControl.isMonthsWanted() ? formatter.format(dur.getMonths()) : "0");
        collWeeksTextField.setText(durationControl.isWeeksWanted() ? formatter.format(dur.getWeeks()) : "0");
        collDaysTextField.setText(durationControl.isDaysWanted() ? formatter.format(dur.getDays()) : "0");

        // there must be at least one of the following checkboxes enabled:
        // decades, years, quarters or months
        // check whether we must enable at least one checkbox again
        if (!collYearsCheckBox.isSelected()
         && !collQuartersCheckBox.isSelected()
         && !collMonthsCheckBox.isSelected()
         && !collDecadesCheckBox.isSelected()
         && !collCenturiesCheckBox.isSelected()) {
            if (evt != null && evt.getItem() == collMonthsCheckBox) {
                collCenturiesCheckBox.setSelected(true);
            } else {
                collMonthsCheckBox.setSelected(true);
            }
        }
        // there must be at least one of the following checkboxes enabled:
        // days or weeks
        if (!collDaysCheckBox.isSelected()
                && !collWeeksCheckBox.isSelected()) {
            if (evt != null && evt.getItem() == collDaysCheckBox) {
                collWeeksCheckBox.setSelected(true);
            } else {
                collDaysCheckBox.setSelected(true);
            }
        }

    }

    private void updateAllPanels() {
        updateInputPanel();
        updateExactPanel();
        updateColloquialPanel();
        updateBusinessPanel();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new DateDiffDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel aDSTLabel;
    private javax.swing.JButton aDatePickerButton;
    private javax.swing.JLabel aLabel;
    private javax.swing.JTextField aTextField;
    private javax.swing.JButton aTimePickerButton;
    private javax.swing.JComboBox aTimeZoneComboBox;
    private javax.swing.JLabel aTimeZoneLabel;
    private javax.swing.JLabel bDSTLabel;
    private javax.swing.JButton bDatePickerButton;
    private javax.swing.JLabel bLabel;
    private javax.swing.JTextField bTextField;
    private javax.swing.JButton bTimePickerButton;
    private javax.swing.JComboBox bTimeZoneComboBox;
    private javax.swing.JLabel bTimeZoneLabel;
    private javax.swing.JPanel businessPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JCheckBox collCenturiesCheckBox;
    private javax.swing.JTextField collCenturiesTextField;
    private javax.swing.JCheckBox collDaysCheckBox;
    private javax.swing.JTextField collDaysTextField;
    private javax.swing.JCheckBox collDecadesCheckBox;
    private javax.swing.JTextField collDecadesTextField;
    private javax.swing.JCheckBox collMonthsCheckBox;
    private javax.swing.JTextField collMonthsTextField;
    private javax.swing.JCheckBox collQuartersCheckBox;
    private javax.swing.JTextField collQuartersTextField;
    private javax.swing.JCheckBox collWeeksCheckBox;
    private javax.swing.JTextField collWeeksTextField;
    private javax.swing.JCheckBox collYearsCheckBox;
    private javax.swing.JTextField collYearsTextField;
    private javax.swing.JCheckBox daysCheckBox;
    private javax.swing.JTextField daysTextField;
    private javax.swing.JPanel exactPanel;
    private javax.swing.JCheckBox hoursCheckBox;
    private javax.swing.JTextField hoursTextField;
    private javax.swing.JLabel ingoreLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JPanel jumboPanel;
    private javax.swing.JCheckBox leapSecondsCheckBox;
    private javax.swing.JButton locationSwitchButton;
    private javax.swing.JCheckBox minutesCheckBox;
    private javax.swing.JTextField minutesTextField;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel relationshipLabel;
    private javax.swing.JCheckBox secondsCheckBox;
    private javax.swing.JTextField secondsTextField;
    private javax.swing.JLabel signLabel;
    private javax.swing.JPanel ugsPanel;
    private javax.swing.JCheckBox weeksCheckBox;
    private javax.swing.JTextField weeksTextField;
    private javax.swing.JComboBox zinstageComboBox;
    private javax.swing.JTextField zinstageTextField;
    // End of variables declaration//GEN-END:variables

    private void timerButton() {
        aTextField.setEnabled(false);
        ClockThread clockThread = new ClockThread(aTextField);
        clockThread.start();
    }

    @Override
    public ResourceBundle getResourceBundle() {
        return dialogInterface.getResourceBundle();
    }

    @Override
    public ResourceBundle getISO3166ResourceBundle() {
        return renderer.getISO3166ResourceBundle();
    }

}
