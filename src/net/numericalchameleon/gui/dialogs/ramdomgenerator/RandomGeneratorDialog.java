/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.ramdomgenerator;

import net.numericalchameleon.util.misc.RandomGenerator;
import java.awt.event.ItemEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.ResourceBundle;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import jonelo.sugar.io.GeneralIO;
import jonelo.sugar.util.GeneralString;
import net.numericalchameleon.beans.Dice;
import net.numericalchameleon.gui.common.interfaces.DialogInterface;

/**
 * RandomGeneratorDialog
 */
public class RandomGeneratorDialog extends javax.swing.JDialog {

    private ResourceBundle rb;
    private List<Dice> dices;
    private int rollCount = 0;

    /**
     * Creates new form RandomGeneratorDialog
     *
     * @param dialogInterface
     */
    public RandomGeneratorDialog(DialogInterface dialogInterface) {
        super(dialogInterface.getFrame(), false);
        this.rb = dialogInterface.getResourceBundle();
        initComponents();
        dices = new ArrayList<Dice>();
        dices.add(myDice);
        diceSpinner.setValue(3);
        setLocationRelativeTo(dialogInterface.getFrame());
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        randomGeneratorScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        randomGeneratorTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        myScrollPane = new javax.swing.JScrollPane();
        myPanel = new javax.swing.JPanel();
        myDice = new net.numericalchameleon.beans.Dice();
        jLabel1 = new javax.swing.JLabel();
        diceSpinner = new javax.swing.JSpinner();
        coloredDices = new javax.swing.JCheckBox();
        rollButton = new javax.swing.JButton();
        rollCountLabel = new javax.swing.JLabel();
        noticeCheckBox = new javax.swing.JCheckBox();
        csvCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lowerboundTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        upperboundTextField = new javax.swing.JTextField();
        noDuplicatesCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        generatorCountTextField = new javax.swing.JTextField();
        sortCheckBox = new javax.swing.JCheckBox();
        generatorButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(rb.getString("GUI.RandomGenerator.DialogTitle")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
        cancelButton.setText(rb.getString("GUI.General.Close")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        clearButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/edit-clear.png"))); // NOI18N
        clearButton.setText(rb.getString("GUI.General.Clear")); // NOI18N
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/edit-copy.png"))); // NOI18N
        copyButton.setText(rb.getString("GUI.General.Copy")); // NOI18N
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        textArea.setFont(new java.awt.Font("Courier", 0, 13));
        randomGeneratorScrollPane.setViewportView(textArea);

        myScrollPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                myScrollPaneComponentResized(evt);
            }
        });

        myPanel.setLayout(new java.awt.GridLayout(1, 0));

        javax.swing.GroupLayout myDiceLayout = new javax.swing.GroupLayout(myDice);
        myDice.setLayout(myDiceLayout);
        myDiceLayout.setHorizontalGroup(
            myDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 441, Short.MAX_VALUE)
        );
        myDiceLayout.setVerticalGroup(
            myDiceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 312, Short.MAX_VALUE)
        );

        myPanel.add(myDice);

        myScrollPane.setViewportView(myPanel);

        jLabel1.setText(rb.getString("GUI.RandomGenerator.DieDice")); // NOI18N

        diceSpinner.setModel(new SpinnerNumberModel(1, 1, 1000, 1));
        diceSpinner.setValue(Integer.valueOf(1));
        diceSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                diceSpinnerStateChanged(evt);
            }
        });

        coloredDices.setText(rb.getString("GUI.RandomGenerator.ColoredDices")); // NOI18N
        coloredDices.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        coloredDices.setMargin(new java.awt.Insets(0, 0, 0, 0));
        coloredDices.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                coloredDicesItemStateChanged(evt);
            }
        });

        rollButton.setText(rb.getString("GUI.RandomGenerator.RollTheDice")); // NOI18N
        rollButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollButtonActionPerformed(evt);
            }
        });

        rollCountLabel.setText("---");

        noticeCheckBox.setSelected(true);
        noticeCheckBox.setText(rb.getString("GUI.RandomGenerator.MakeANote")); // NOI18N
        noticeCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        noticeCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));
        noticeCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                noticeCheckBoxItemStateChanged(evt);
            }
        });
        noticeCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noticeCheckBoxActionPerformed(evt);
            }
        });

        csvCheckBox.setText(rb.getString("GUI.RandomGenerator.csv")); // NOI18N
        csvCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                csvCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rollCountLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(diceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1))
                    .addComponent(coloredDices)
                    .addComponent(noticeCheckBox)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(csvCheckBox))
                    .addComponent(rollButton))
                .addGap(7, 7, 7)
                .addComponent(myScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 443, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(myScrollPane)
                        .addContainerGap())
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(rollCountLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(diceSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(coloredDices)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(noticeCheckBox)
                        .addGap(1, 1, 1)
                        .addComponent(csvCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rollButton)
                        .addGap(194, 194, 194))))
        );

        randomGeneratorTabbedPane.addTab(rb.getString("GUI.RandomGenerator.RollTheDice"), jPanel1); // NOI18N

        jLabel2.setText(rb.getString("GUI.RandomGenerator.ValueFrom")); // NOI18N

        lowerboundTextField.setText("1");

        jLabel3.setText(rb.getString("GUI.RandomGenerator.ValueTo")); // NOI18N

        upperboundTextField.setText("49");

        noDuplicatesCheckBox.setSelected(true);
        noDuplicatesCheckBox.setText(rb.getString("GUI.RandomGenerator.NoDuplicateNumbers")); // NOI18N
        noDuplicatesCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        noDuplicatesCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        jLabel4.setText(rb.getString("GUI.RandomGenerator.Quantity")); // NOI18N

        generatorCountTextField.setText("6");

        sortCheckBox.setSelected(true);
        sortCheckBox.setText(rb.getString("GUI.RandomGenerator.Sort")); // NOI18N
        sortCheckBox.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        sortCheckBox.setMargin(new java.awt.Insets(0, 0, 0, 0));

        generatorButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/auction-hammer.png"))); // NOI18N
        generatorButton.setText(rb.getString("GUI.RandomGenerator.Generate")); // NOI18N
        generatorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generatorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(generatorButton)
                    .addComponent(lowerboundTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(upperboundTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(generatorCountTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 475, Short.MAX_VALUE)
                    .addComponent(sortCheckBox, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(noDuplicatesCheckBox, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(lowerboundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(upperboundTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(noDuplicatesCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generatorCountTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortCheckBox)
                .addGap(14, 14, 14)
                .addComponent(generatorButton)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(161, Short.MAX_VALUE))
        );

        randomGeneratorTabbedPane.addTab(rb.getString("GUI.RandomGenerator.RandomGenerator"), jPanel2); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(randomGeneratorTabbedPane, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clearButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cancelButton))
                    .addComponent(randomGeneratorScrollPane, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(randomGeneratorTabbedPane)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(randomGeneratorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton)
                    .addComponent(copyButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        String s = textArea.getSelectedText();
        if (s == null) {
            textArea.selectAll();
            s = textArea.getText();
        }
        GeneralIO.setClipboard(s);
        textArea.requestFocus();
    }//GEN-LAST:event_copyButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        rollCount = 0;        
        rollCountLabel.setText(rollCountText());
        textArea.setText("");
    }//GEN-LAST:event_clearButtonActionPerformed

    
    private void generatorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generatorButtonActionPerformed
        int count;
        int lowerbound;
        int upperbound;
        try {
            count = Integer.valueOf(generatorCountTextField.getText()).intValue();
            lowerbound = Integer.valueOf(lowerboundTextField.getText()).intValue();
            upperbound = Integer.valueOf(upperboundTextField.getText()).intValue();
        } catch (Exception e) {
            textArea.append("Error: invalid input\n");
            System.err.println(e);
            return;
        }

        if (count > 1000) { // avoid OOMs
            textArea.append("Error: Sorry, not more than 1000 random numbers are supported.\n");
            return;
        }
        
        if (count < 1) { // negative or zero
            generatorCountTextField.setText("1");
            count = 1;
        }

        // we don't want infinite loops
        if ((upperbound - lowerbound + 1 < count) && (noDuplicatesCheckBox.isSelected())) {
            noDuplicatesCheckBox.setSelected(false);
        }

        int[] randoms;
        try {
            randoms = RandomGenerator.generate(count, lowerbound, upperbound, !noDuplicatesCheckBox.isSelected(), sortCheckBox.isSelected());
        } catch (IllegalArgumentException iae) {
            textArea.append("Error: " + iae.getMessage() + "\n");
            return;
        }
        // now, we have all numbers in the vector        

        StringBuilder sb = new StringBuilder(64);
        if (count > 0) {            
            for (int i = 0; i < randoms.length; i++) {
                sb.append(randoms[i]);
                if (i < count - 1) {
                    sb.append(",");
                }
            }
            sb.append("\n");
            textArea.append(sb.toString());
            textArea.setCaretPosition(textArea.getText().length() - 1);
        }
    }//GEN-LAST:event_generatorButtonActionPerformed

    private void noticeCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_noticeCheckBoxActionPerformed
// TODO add your handling code here:
    }//GEN-LAST:event_noticeCheckBoxActionPerformed

    private void noticeCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_noticeCheckBoxItemStateChanged
// TODO add your handling code here:
    }//GEN-LAST:event_noticeCheckBoxItemStateChanged

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        setVisible(false);
        dispose();
    }//GEN-LAST:event_formWindowClosing

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        formWindowClosing(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private String rollCountText() {
        return GeneralString.message(rb.getString("GUI.RandomGenerator.ThrowNumber"), rollCount);
    }
    
    private void rollButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollButtonActionPerformed
        // update x. Wurf
        rollCount++;
        rollCountLabel.setText(rollCountText());

        StringBuilder sb = new StringBuilder(64);
        if (noticeCheckBox.isSelected()) {
            if (!csvCheckBox.isSelected()) {
                sb.append(rollCountText()+": ");
            }
        }

        for (int i = 0; i < dices.size(); i++) {
            Dice dice = dices.get(i);
            dice.roll();
            if (noticeCheckBox.isSelected()) {
                sb.append(String.valueOf(dice.getValue()));
                if (i < dices.size() - 1) {
                    sb.append(",");
                }
            }
        }

        if (noticeCheckBox.isSelected()) {
            sb.append("\n");
            textArea.append(sb.toString());
            textArea.setCaretPosition(textArea.getText().length() - 1);
        }

    }//GEN-LAST:event_rollButtonActionPerformed

    private void coloredDicesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_coloredDicesItemStateChanged
        int change = evt.getStateChange();
        if (change == ItemEvent.SELECTED) {
            for (int i = 0; i < dices.size(); i++) {
                (dices.get(i)).setRandomColor();
            }
        } else if (change == ItemEvent.DESELECTED) {
            for (int i = 0; i < dices.size(); i++) {
                (dices.get(i)).setColor(Dice.DICE_DEFAULT_COLOR);
            }
        }
    }//GEN-LAST:event_coloredDicesItemStateChanged

    private void diceSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_diceSpinnerStateChanged
        JSpinner spinner = (JSpinner) evt.getSource();
        int spinnerValue = ((Integer) spinner.getValue()).intValue();
        // Get the new value
        while (dices.size() < spinnerValue) {
            addDice();
        }
        while (dices.size() > spinnerValue) {
            removeDice();
        }
    }//GEN-LAST:event_diceSpinnerStateChanged

    private void myScrollPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_myScrollPaneComponentResized
        updateScrollPane();
    }//GEN-LAST:event_myScrollPaneComponentResized

    private void csvCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_csvCheckBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_csvCheckBoxActionPerformed

    private void updateScrollPane() {
        int dicesHorizontally = (int) (myScrollPane.getWidth() / myDice.getPreferredSize().getWidth());
        dicesHorizontally = Math.min(dicesHorizontally, dices.size());
        dicesHorizontally = Math.max(1, dicesHorizontally); // value must be at least 1

        myPanel.setLayout(new java.awt.GridLayout(0, dicesHorizontally));
        myScrollPane.validate();
        myScrollPane.repaint();
    }

    private void removeDice() {
        if (dices.size() > 1) {
            Dice dice = dices.get(dices.size() - 1);
            myPanel.remove(dice);
            dices.remove(dice);
            updateScrollPane();
        }
    }

    private void addDice() {
        Dice dice = new Dice();
        if (coloredDices.isSelected()) {
            dice.setRandomColor();
        }
        dices.add(dice);
        myPanel.add(dice);
        updateScrollPane();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearButton;
    private javax.swing.JCheckBox coloredDices;
    private javax.swing.JButton copyButton;
    private javax.swing.JCheckBox csvCheckBox;
    private javax.swing.JSpinner diceSpinner;
    private javax.swing.JButton generatorButton;
    private javax.swing.JTextField generatorCountTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTextField lowerboundTextField;
    private net.numericalchameleon.beans.Dice myDice;
    private javax.swing.JPanel myPanel;
    private javax.swing.JScrollPane myScrollPane;
    private javax.swing.JCheckBox noDuplicatesCheckBox;
    private javax.swing.JCheckBox noticeCheckBox;
    private javax.swing.JScrollPane randomGeneratorScrollPane;
    private javax.swing.JTabbedPane randomGeneratorTabbedPane;
    private javax.swing.JButton rollButton;
    private javax.swing.JLabel rollCountLabel;
    private javax.swing.JCheckBox sortCheckBox;
    private javax.swing.JTextArea textArea;
    private javax.swing.JTextField upperboundTextField;
    // End of variables declaration//GEN-END:variables
}
