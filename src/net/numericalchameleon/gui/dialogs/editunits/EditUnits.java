/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.editunits;

import java.io.*;
import java.net.URL;
import java.util.ResourceBundle;
import javax.swing.JRootPane;
import net.numericalchameleon.data.Bookmark;
import net.numericalchameleon.info.ProgConstants;

public class EditUnits extends javax.swing.JDialog {
    private ResourceBundle resourceBundle;
    private String filename;
    private final static String ENCODING = "UTF-8";
    private Bookmark bookmark;
    private EditUnitsInterface editUnitsInterface;
    
    /** Creates new form EditUnits */
    public EditUnits(EditUnitsInterface editUnitsInterface, boolean modal) {
        super(editUnitsInterface.getFrame(), modal);

        this.editUnitsInterface = editUnitsInterface;
        this.resourceBundle = editUnitsInterface.getResourceBundle();
        
        if (editUnitsInterface.getFrame().isUndecorated()) {
            setUndecorated(true);
            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        }
        setLocationRelativeTo(editUnitsInterface.getFrame());
        initComponents();
        // the number 1 (one) and l (the lower case L) cannot be distinguished with size 12
        // and Netbeans 5.0 ignores the following line if set to 13
        textArea.setFont(new java.awt.Font("Courier", 0, 13));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cancelButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        headerLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(resourceBundle.getString("GUI.Config.Units.Edit")); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
        cancelButton.setText(resourceBundle.getString("GUI.General.Close")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        saveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/save.png"))); // NOI18N
        saveButton.setText(resourceBundle.getString("GUI.General.Save")); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        scrollPane.setViewportView(textArea);

        headerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix48x48/dontpanic.png"))); // NOI18N
        headerLabel.setText("Category");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addComponent(headerLabel))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(headerLabel)
                .addGap(8, 8, 8)
                .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    public void setDescription(String string) {
        //setTitle(string)
    }

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        try {
            FileOutputStream fos = new FileOutputStream("../data/units/"+filename+".list");
            System.out.println(filename);
            BufferedWriter myOutput = new BufferedWriter(new OutputStreamWriter(fos, ENCODING));
            myOutput.write(textArea.getText());
            myOutput.close();
            fos.close();
            try {
                editUnitsInterface.visitBookmark(bookmark, true);
            } catch (Exception ignore) {}
        } catch (Exception e) {
            System.err.println(e);
        }
        
    }//GEN-LAST:event_saveButtonActionPerformed
    
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog
    
    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed
    
    public void fill() {
        String string = read();
        textArea.setText(string);
        textArea.setCaretPosition(0);
    }
    

    public void setFilename(String filename) {
       this.filename = filename;
    }
    
    public void setBookmark(Bookmark bookmark) {
       this.bookmark = bookmark;
       URL url = getClass().getResource(ProgConstants.ICONS_CATEGORIES + bookmark.getCategory()+".png");
       if (url==null) {
           url = getClass().getResource(ProgConstants.ICONS_CATEGORIES + "notfound.png");
       }
       headerLabel.setIcon (new javax.swing.ImageIcon(url));              
    }
    
    public void setHeader(String header) {
        headerLabel.setText(header);
    }

    public String read() {
        StringBuilder sb = new StringBuilder();
        try {
            InputStream is = getClass().getResourceAsStream("/data/units/"+filename+".list");
            BufferedReader br = new BufferedReader(new InputStreamReader(is, ENCODING));
            String thisLine;
            while ((thisLine = br.readLine()) != null) {
                sb.append(thisLine).append("\n");
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return sb.toString();
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel headerLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
    
}
