/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.timechooser;

import java.util.Calendar;
import java.util.ResourceBundle;
import javax.swing.JRootPane;
import net.numericalchameleon.gui.common.interfaces.DialogInterface;

public class TimeChooserDialog extends javax.swing.JDialog {

    private ResourceBundle rb;    
    private TimeChooserInterface timeChooserInterface;

    /** Creates new form TimeChooserDialog */
    public TimeChooserDialog(DialogInterface dialogInterface, TimeChooserInterface timeChooserInterface) {
        super(dialogInterface.getFrame(), true);        
        this.rb = dialogInterface.getResourceBundle();
        this.timeChooserInterface = timeChooserInterface;
        
        if (dialogInterface.getFrame().isUndecorated()) {
            setUndecorated(true);
            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        }

        initComponents();
        // System.out.println(String.format("%02x%02x%02x", c.getRed(), c.getGreen(), c.getBlue()));
        analogClock.setBackground(clockPanel.getBackground());

        //secondSpinner.setValue(Integer.valueOf(calendar.get(Calendar.SECOND)));
        //minuteSpinner.setValue(Integer.valueOf(calendar.get(Calendar.MINUTE)));
        //hourSpinner.setValue(Integer.valueOf(calendar.get(Calendar.HOUR_OF_DAY)));
        //updateSliderValue();
        setLocationRelativeTo(dialogInterface.getFrame());
        analogClock.setIntervalInMillis(1000);
        analogClock.start();
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        hourSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        minuteSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        secondSpinner = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        slider = new javax.swing.JSlider();
        manualInput = new javax.swing.JCheckBox();
        realTimeOutput = new javax.swing.JCheckBox();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        clockPanel = new javax.swing.JPanel();
        analogClock = new net.numericalchameleon.beans.AnalogClockBean();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle(rb.getString("GUI.General.TimePicker")); // NOI18N
        setMinimumSize(new java.awt.Dimension(400, 250));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        hourSpinner.setEnabled(false);
        hourSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hourSpinnerStateChanged(evt);
            }
        });

        jLabel1.setText(":");

        minuteSpinner.setEnabled(false);
        minuteSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                minuteSpinnerStateChanged(evt);
            }
        });

        jLabel2.setText(":");

        secondSpinner.setEnabled(false);
        secondSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                secondSpinnerStateChanged(evt);
            }
        });

        jLabel3.setText(rb.getString("TimeChooser.Hour")); // NOI18N

        jLabel4.setText(rb.getString("TimeChooser.Minute")); // NOI18N

        jLabel5.setText(rb.getString("TimeChooser.Second")); // NOI18N

        slider.setMajorTickSpacing(43200);
        slider.setMaximum(86399);
        slider.setMinorTickSpacing(3600);
        slider.setPaintTicks(true);
        slider.setEnabled(false);
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });

        manualInput.setText(rb.getString("TimeChooser.ManualInput")); // NOI18N
        manualInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualInputActionPerformed(evt);
            }
        });

        realTimeOutput.setText(rb.getString("TimeChooser.RealTimeOutput")); // NOI18N
        realTimeOutput.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                realTimeOutputStateChanged(evt);
            }
        });
        realTimeOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                realTimeOutputActionPerformed(evt);
            }
        });

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
        cancelButton.setText(rb.getString("GUI.General.Close")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        okButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/ok.png"))); // NOI18N
        okButton.setText(rb.getString("GUI.General.OK")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        analogClock.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                analogClockMouseClicked(evt);
            }
        });
        analogClock.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                analogClockPropertyChange(evt);
            }
        });

        javax.swing.GroupLayout analogClockLayout = new javax.swing.GroupLayout(analogClock);
        analogClock.setLayout(analogClockLayout);
        analogClockLayout.setHorizontalGroup(
            analogClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 368, Short.MAX_VALUE)
        );
        analogClockLayout.setVerticalGroup(
            analogClockLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout clockPanelLayout = new javax.swing.GroupLayout(clockPanel);
        clockPanel.setLayout(clockPanelLayout);
        clockPanelLayout.setHorizontalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 181, Short.MAX_VALUE)
            .addGroup(clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(clockPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(analogClock, javax.swing.GroupLayout.DEFAULT_SIZE, 161, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        clockPanelLayout.setVerticalGroup(
            clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
            .addGroup(clockPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(clockPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(analogClock, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(okButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cancelButton))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(hourSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1))
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(minuteSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2))
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(secondSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(manualInput)
                            .addComponent(realTimeOutput))
                        .addGap(18, 18, 18)
                        .addComponent(clockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(clockPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cancelButton)
                            .addComponent(okButton)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(secondSpinner)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(minuteSpinner)
                                .addComponent(hourSpinner)))
                        .addGap(18, 18, 18)
                        .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(manualInput)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(realTimeOutput)
                        .addGap(0, 91, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        /*       if (evt.getSource() instanceof JSlider) {
        System.out.println("here");
        analogClock.stop();
        }
         */
        // get the seconds
        int t = slider.getValue();

        int s = 0, m = 0, h = 0;

        if (t > 0) {
            s = t % 60;
            t /= 60;
        }
        if (t > 0) {
            m = t % 60;
            t /= 60;
        }
        if (t > 0) {
            h = t % 24;
            t /= 24;
        }

        secondSpinner.setValue(Integer.valueOf(s));
        minuteSpinner.setValue(Integer.valueOf(m));
        hourSpinner.setValue(Integer.valueOf(h));

        analogClock.setSeconds(Integer.valueOf(s));
        analogClock.setMinutes(Integer.valueOf(m));
        analogClock.setHours(Integer.valueOf(h));
        analogClock.repaint();

    }//GEN-LAST:event_sliderStateChanged

    private void secondSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_secondSpinnerStateChanged

        int s = Integer.parseInt(secondSpinner.getValue() + "");
        int m = Integer.parseInt(minuteSpinner.getValue() + "");
        int h = Integer.parseInt(hourSpinner.getValue() + "");

        if (s > 59) {
            if (h == 23 && m == 59) {
                secondSpinner.setValue(59);
            } else {
                secondSpinner.setValue(0);
                minuteSpinner.setValue(Integer.parseInt(minuteSpinner.getValue() + "") + 1);
            }
        }
        if (s < 0) {
            if (h == 0 && m == 0) {
                secondSpinner.setValue(0);
            } else {
                secondSpinner.setValue(Integer.valueOf(59));
                minuteSpinner.setValue(Integer.parseInt(minuteSpinner.getValue() + "") - 1);
            }
        }
        updateSliderValue();
    }//GEN-LAST:event_secondSpinnerStateChanged

    private void minuteSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_minuteSpinnerStateChanged

        int m = Integer.parseInt(minuteSpinner.getValue() + "");
        int h = Integer.parseInt(hourSpinner.getValue() + "");
        if (m > 59) {
            if (h == 23) {
                minuteSpinner.setValue(59);
            } else {
                minuteSpinner.setValue(Integer.valueOf(0));
                hourSpinner.setValue(Integer.parseInt(hourSpinner.getValue() + "") + 1);
            }
        }
        if (m < 0) {
            if (h == 0) {
                minuteSpinner.setValue(0);
            } else {
                minuteSpinner.setValue(Integer.valueOf(59));
                hourSpinner.setValue(Integer.parseInt(hourSpinner.getValue() + "") - 1);
            }
        }
        updateSliderValue();
    }//GEN-LAST:event_minuteSpinnerStateChanged

    private void hourSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hourSpinnerStateChanged

        int i = Integer.parseInt(hourSpinner.getValue() + "");
        if (i > 23) {
            hourSpinner.setValue(Integer.valueOf(23));
        }
        if (i < 0) {
            hourSpinner.setValue(Integer.valueOf(0));
        }
        updateSliderValue();
    }//GEN-LAST:event_hourSpinnerStateChanged

    private void updateSliderValue() {
        int m = Integer.parseInt(minuteSpinner.getValue() + "");
        int s = Integer.parseInt(secondSpinner.getValue() + "");
        int h = Integer.parseInt(hourSpinner.getValue() + "");
        slider.setValue((h * 3600) + (m * 60) + s);
    }

    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        analogClock.stop();
        dispose();
    }//GEN-LAST:event_closeDialog

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        timeChooserInterface.setCancelled(true);
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        timeChooserInterface.setCancelled(false);
        
        Calendar calendar = timeChooserInterface.getCalcandar();
        calendar.set(Calendar.HOUR_OF_DAY, Integer.parseInt(String.valueOf(hourSpinner.getValue())));
        calendar.set(Calendar.MINUTE, Integer.parseInt(String.valueOf(minuteSpinner.getValue())));
        calendar.set(Calendar.SECOND, Integer.parseInt(String.valueOf(secondSpinner.getValue())));        
        closeDialog(null);
    }//GEN-LAST:event_okButtonActionPerformed
  
    public void closeDialog() {
        closeDialog(null);
    }
    
    private void realTimeOutputStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_realTimeOutputStateChanged
}//GEN-LAST:event_realTimeOutputStateChanged

    
    private void realTimeOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_realTimeOutputActionPerformed
        if (realTimeOutput.isSelected()) {
            analogClock.setIntervalInMillis(10);
        } else {
            analogClock.setIntervalInMillis(1000);
        }
    }//GEN-LAST:event_realTimeOutputActionPerformed

    private void manualInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manualInputActionPerformed
        if (manualInput.isSelected()) {
            realTimeOutput.setEnabled(false);
            analogClock.stop();
            slider.setValue((analogClock.getHours() * 3600) + (analogClock.getMinutes() * 60) + analogClock.getSeconds());
            slider.setEnabled(true);
            hourSpinner.setEnabled(true);
            minuteSpinner.setEnabled(true);
            secondSpinner.setEnabled(true);
        } else {
            realTimeOutput.setEnabled(true);
            slider.setEnabled(false);
            hourSpinner.setEnabled(false);
            minuteSpinner.setEnabled(false);
            secondSpinner.setEnabled(false);
            analogClock.start();
        }
    }//GEN-LAST:event_manualInputActionPerformed

    private void analogClockPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_analogClockPropertyChange
        if (evt.getPropertyName().equals("millis")) {
            slider.setValue((analogClock.getHours() * 3600) + (analogClock.getMinutes() * 60) + analogClock.getSeconds());
        }
    }//GEN-LAST:event_analogClockPropertyChange

    private void analogClockMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_analogClockMouseClicked
        if (manualInput.isSelected()) {
            int t = slider.getValue();
            slider.setValue(t + 1);
        }
    }//GEN-LAST:event_analogClockMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
//                new TimeChooserDialog(new javax.swing.JFrame(), true).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private net.numericalchameleon.beans.AnalogClockBean analogClock;
    private javax.swing.JButton cancelButton;
    private javax.swing.JPanel clockPanel;
    private javax.swing.JSpinner hourSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JCheckBox manualInput;
    private javax.swing.JSpinner minuteSpinner;
    private javax.swing.JButton okButton;
    private javax.swing.JCheckBox realTimeOutput;
    private javax.swing.JSpinner secondSpinner;
    private javax.swing.JSlider slider;
    // End of variables declaration//GEN-END:variables
}
