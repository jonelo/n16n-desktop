/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.phoneticalphabet;

import java.util.ResourceBundle;
import java.util.Vector;
import javax.swing.JRootPane;
import javax.swing.ListModel;
import jonelo.sugar.gui.GeneralGUI;
import jonelo.sugar.io.GeneralIO;
import net.numericalchameleon.data.Unit;
import net.numericalchameleon.gui.common.renderer.UnitRecordCellRenderer;
import net.numericalchameleon.util.phoneticalphabets.PhoneticAlphabet;

public class PhoneticAlphabetDialog extends javax.swing.JDialog {

    private ResourceBundle rb;
    private Vector data;

    /** Creates new form PhoneticAlphabetDialog */
    public PhoneticAlphabetDialog(PhoneticAlphabetDialogInterface dialogInterface) {
        super(dialogInterface.getFrame(), false);
        this.rb = dialogInterface.getResourceBundle();
        setTitle(rb.getString("GUI.PhoneticAlphabet.Title"));
        if (dialogInterface.getFrame().isUndecorated()) {
            setUndecorated(true);
            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        }
        phoneticAlphabet = new PhoneticAlphabet(PhoneticAlphabet.INTERNATIONAL);
        initComponents();
        setLocationRelativeTo(dialogInterface.getFrame());

        inputTextField.requestFocus();

        UnitRecordCellRenderer ncRecordCellRenderer = new UnitRecordCellRenderer(dialogInterface.getISO3166ResourceBundle());

        alphabetComboBox.setRenderer(ncRecordCellRenderer);
        setVisible(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        closeButton = new javax.swing.JButton();
        alphabetLabel = new javax.swing.JLabel();
        textLabel = new javax.swing.JLabel();
        spellLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        wordList = new javax.swing.JList();
        jPanel5 = new javax.swing.JPanel();
        alphabetComboBox = new javax.swing.JComboBox();
        jPanel4 = new javax.swing.JPanel();
        prevButton = new javax.swing.JButton();
        nextButton = new javax.swing.JButton();
        inputTextField = new javax.swing.JTextField();
        copyButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
        closeButton.setText(rb.getString("GUI.General.Close")); // NOI18N
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });

        alphabetLabel.setText(rb.getString("GUI.PhoneticAlphabet.Alphabet")); // NOI18N

        textLabel.setText(rb.getString("GUI.PhoneticAlphabet.Text")); // NOI18N

        spellLabel.setText(rb.getString("GUI.PhoneticAlphabet.Spell")); // NOI18N

        jScrollPane1.setPreferredSize(new java.awt.Dimension(300, 300));

        wordList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(wordList);

        jPanel5.setLayout(new java.awt.BorderLayout());

        alphabetComboBox.setMaximumRowCount(17);
        alphabetComboBox.setModel(getAlphabetModel());
        alphabetComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                alphabetComboBoxItemStateChanged(evt);
            }
        });
        jPanel5.add(alphabetComboBox, java.awt.BorderLayout.CENTER);

        jPanel4.setLayout(new java.awt.GridLayout(2, 0));

        prevButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix6x3/up.png"))); // NOI18N
        prevButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        prevButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                prevButtonActionPerformed(evt);
            }
        });
        jPanel4.add(prevButton);

        nextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix6x3/down.png"))); // NOI18N
        nextButton.setMargin(new java.awt.Insets(2, 2, 2, 2));
        nextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextButtonActionPerformed(evt);
            }
        });
        jPanel4.add(nextButton);

        jPanel5.add(jPanel4, java.awt.BorderLayout.EAST);

        inputTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        inputTextField.setPreferredSize(new java.awt.Dimension(200, 20));
        inputTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                inputTextFieldKeyReleased(evt);
            }
        });

        copyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/edit-copy.png"))); // NOI18N
        copyButton.setText(rb.getString("GUI.General.Copy")); // NOI18N
        copyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textLabel)
                            .addComponent(spellLabel)
                            .addComponent(alphabetLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addComponent(inputTextField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)
                            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, 302, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(copyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(closeButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(alphabetLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(textLabel)
                    .addComponent(inputTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spellLabel)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(closeButton)
                    .addComponent(copyButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void copyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyButtonActionPerformed
        ListModel lm = wordList.getModel();
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < lm.getSize(); i++) {
            sb.append((String) lm.getElementAt(i));
            sb.append("\n");
        }
        GeneralIO.setClipboard(sb.toString());
        inputTextField.requestFocusInWindow();
    }//GEN-LAST:event_copyButtonActionPerformed

    private void nextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextButtonActionPerformed
        // Add your handling code here:
        int now = alphabetComboBox.getSelectedIndex();
        int all = alphabetComboBox.getItemCount();
        if (now + 1 < all) {
            alphabetComboBox.setSelectedIndex(now + 1);
        } else {
            alphabetComboBox.setSelectedIndex(0);
        }
    }//GEN-LAST:event_nextButtonActionPerformed

    private void prevButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_prevButtonActionPerformed
        int now = alphabetComboBox.getSelectedIndex();
        int all = alphabetComboBox.getItemCount();
        if (now > 0) {
            alphabetComboBox.setSelectedIndex(now - 1);
        } else {
            alphabetComboBox.setSelectedIndex(all - 1);
        }
    }//GEN-LAST:event_prevButtonActionPerformed

    private void alphabetComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_alphabetComboBoxItemStateChanged
        // load a new alphabet
        phoneticAlphabet = new PhoneticAlphabet(getAlphabet(alphabetComboBox.getSelectedIndex()));
        updateWordsList();
    }//GEN-LAST:event_alphabetComboBoxItemStateChanged

    private void inputTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputTextFieldKeyReleased
        int code = evt.getKeyCode();
        boolean b = true;
        for (int i = 0; i < GeneralGUI.noTextChangeKeyEvents.length; i++) {
            if (code == GeneralGUI.noTextChangeKeyEvents[i]) {
                b = false;
                break;
            }
        }
        if (b) {
            updateWordsList();
        }
    }//GEN-LAST:event_inputTextFieldKeyReleased

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_closeButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog

    // phoneticAlphabet-methods    
    private javax.swing.ComboBoxModel getAlphabetModel() {
        Vector data = getAlphabetVector();
        javax.swing.JComboBox cb = new javax.swing.JComboBox(data);
        return cb.getModel();
    }

    protected String localize(String key, String fallback) {
        String value = rb.getString(key);
        return (value == null) ? fallback : value;
    }

    private Vector getAlphabetVector() {
        data = new Vector();
        data.add(new Unit(localize("PhoneticAlphabet.International", "International"), "int"));
        data.add(new Unit(localize("PhoneticAlphabet.Morse", "Morse"), "int"));
        data.add(new Unit(localize("PhoneticAlphabet.NATO", "NATO / ICAO"), "int"));
        data.add(new Unit(localize("Language.us", "American English"), "us"));
        data.add(new Unit(localize("Language.gb", "British English"), "gb"));
        data.add(new Unit(localize("Language.fr", "French"), "fr"));
        data.add(new Unit(localize("Language.es", "Spanish"), "es"));
        data.add(new Unit(localize("Language.de", "German"), "de"));
        data.add(new Unit(localize("Language.ch", "Swiss"), "ch"));
        data.add(new Unit(localize("Language.at", "Austrian"), "at"));
        data.add(new Unit(localize("Language.it", "Italian"), "it"));
        data.add(new Unit(localize("Language.pt", "Portuguese"), "pt"));
        data.add(new Unit(localize("Language.dk", "Danish"), "dk"));
        data.add(new Unit(localize("Language.nl", "Dutch"), "nl"));
        data.add(new Unit(localize("Language.se", "Swedish"), "se"));
        data.add(new Unit(localize("Language.il", "Hebrew"), "il"));

        data.add(new Unit("Joint Army/Navy (1941-1955)", "us", false));
        data.add(new Unit("Royal Air Force (1924-1942)", "gb", false));
        data.add(new Unit("Royal Air Force (1942-1943)", "gb", false));
        data.add(new Unit("Royal Air Force (1943-1956)", "gb", false));
        data.add(new Unit("Royal Navy (World War I)", "gb", false));
        return data;
    }

    private void updateWordsList() {
        wordList.removeAll();
        wordList.setModel(getWordsModel(phoneticAlphabet.get(inputTextField.getText())));
    }

    private ListModel getWordsModel(Vector v) {
        javax.swing.JList jl = new javax.swing.JList(v);
        return jl.getModel();
    }

    private String[] getAlphabet(int i) {
        switch (i) {
            case 0:
                return PhoneticAlphabet.INTERNATIONAL;
            case 1:
                return PhoneticAlphabet.MORSE;
            case 2:
                return PhoneticAlphabet.NATO;
            case 3:
                return PhoneticAlphabet.AMERICAN;
            case 4:
                return PhoneticAlphabet.BRITISH;
            case 5:
                return PhoneticAlphabet.FRENCH;
            case 6:
                return PhoneticAlphabet.SPANISH;
            case 7:
                return PhoneticAlphabet.GERMAN;
            case 8:
                return PhoneticAlphabet.SWISS;
            case 9:
                return PhoneticAlphabet.AUSTRIAN;
            case 10:
                return PhoneticAlphabet.ITALIAN;
            case 11:
                return PhoneticAlphabet.PORTUGUESE;
            case 12:
                return PhoneticAlphabet.DANISH;
            case 13:
                return PhoneticAlphabet.DUTCH;
            case 14:
                return PhoneticAlphabet.SWEDISH;
            case 15:
                return PhoneticAlphabet.HEBREW;
            case 16:
                return PhoneticAlphabet.ARMYNAVY;
            case 17:
                return PhoneticAlphabet.RAF_1943_1956;
            case 18:
                return PhoneticAlphabet.RAF_1942_1943;
            case 19:
                return PhoneticAlphabet.RAF_1924_1942;
            case 20:
                return PhoneticAlphabet.BRITISH_ROYAL_NAVY;
        }
        return null;
    }
    // Non generated variables declaration
    private PhoneticAlphabet phoneticAlphabet;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox alphabetComboBox;
    private javax.swing.JLabel alphabetLabel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton copyButton;
    private javax.swing.JTextField inputTextField;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nextButton;
    private javax.swing.JButton prevButton;
    private javax.swing.JLabel spellLabel;
    private javax.swing.JLabel textLabel;
    private javax.swing.JList wordList;
    // End of variables declaration//GEN-END:variables
}
