/**
 *
 * NumericalChameleon 3.0.0 - more than an unit converter - a NumericalChameleon
 * Copyright (c) 2001-2020 Dipl.-Inf. (FH) Johann Nepomuk Loefflmann, All Rights
 * Reserved, <http://www.numericalchameleon.net>.
 *
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option) any later
 * version.
 *
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 *
 * You should have received a copy of the GNU General Public License along with
 * this program. If not, see <http://www.gnu.org/licenses/>.
 *
 */
package net.numericalchameleon.gui.dialogs.find;

import java.awt.ComponentOrientation;
import java.awt.event.KeyEvent;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import jonelo.sugar.gui.GeneralGUI;
import net.numericalchameleon.data.Category;
import net.numericalchameleon.data.Unit;

public class FindDialog extends javax.swing.JDialog {

    public final static int CATEGORY = 0, SOURCE = 1, TARGET = 2;

    private FindDialogInterface findDialogInterface;
    private int next = 0;
    private JComboBox box;
    private ResourceBundle rb;
    private int[] progressBarValue = new int[3];
    private String[] text = { "", "", "" };
    private int lastselected;


    /** Creates new form FindDialog
     * @param findDialogInterface
     * @param initialSelection */
    public FindDialog(FindDialogInterface findDialogInterface, int initialSelection) {
        super(findDialogInterface.getFrame(), true);
        this.findDialogInterface = findDialogInterface;
        if (findDialogInterface.getFrame().isUndecorated()) {
            setUndecorated(true);
            getRootPane().setWindowDecorationStyle(JRootPane.FRAME);
        }
        this.rb = findDialogInterface.getResourceBundle();
        setTitle(rb.getString("GUI.Menu.Find"));
        initComponents();

        buttonGroup.add(sourceRadioButton);
        buttonGroup.add(targetRadioButton);
        buttonGroup.add(categoryRadioButton);
        lastselected=initialSelection;
        switch (initialSelection) {
            case CATEGORY: categoryRadioButton.setSelected(true); break;
            case SOURCE:   sourceRadioButton.setSelected(true); break;
            case TARGET:   targetRadioButton.setSelected(true); break;
        }
        findProgressBar.setMinimum(0);
        switchit();
        setLocationRelativeTo(findDialogInterface.getFrame());
        ComponentOrientation ce = ComponentOrientation.getOrientation(Locale.getDefault());
        if (!ce.isLeftToRight()) GeneralGUI.applyOrientation(findPanel, ce);

        findTextField.requestFocus();
        setVisible(true);
    }

    private void switchit() {
        // backup of current values
        text[lastselected] = findTextField.getText();
        progressBarValue[lastselected] = findProgressBar.getValue();

        // the current selection
        int selected = CATEGORY;
        if (sourceRadioButton.isSelected()) selected = SOURCE; else
        if (targetRadioButton.isSelected()) selected = TARGET;

        box = findDialogInterface.getComboBox(selected);
        findProgressBar.setMaximum(box.getItemCount());
        findProgressBar.setValue(progressBarValue[selected]);
        findTextField.setText(text[selected]);
        next = progressBarValue[selected]+1;

        lastselected=selected;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup = new javax.swing.ButtonGroup();
        findPanel = new javax.swing.JPanel();
        findLabel = new javax.swing.JLabel();
        findTextField = new javax.swing.JTextField();
        findProgressBar = new javax.swing.JProgressBar();
        jPanel3 = new javax.swing.JPanel();
        matchUpperLowerCaseCheckBox = new javax.swing.JCheckBox();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        sourceRadioButton = new javax.swing.JRadioButton();
        targetRadioButton = new javax.swing.JRadioButton();
        categoryRadioButton = new javax.swing.JRadioButton();
        buttonPanel = new javax.swing.JPanel();
        resetButton = new javax.swing.JButton();
        findButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        findPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(15, 15, 10, 15));
        findPanel.setLayout(new java.awt.GridBagLayout());

        findLabel.setText(rb.getString("GUI.Menu.Find")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        findPanel.add(findLabel, gridBagConstraints);

        findTextField.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        findTextField.setPreferredSize(new java.awt.Dimension(250, 20));
        findTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                findTextFieldKeyReleased(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        findPanel.add(findTextField, gridBagConstraints);

        findProgressBar.setStringPainted(true);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        findPanel.add(findProgressBar, gridBagConstraints);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        matchUpperLowerCaseCheckBox.setText(rb.getString("GUI.Find.Match")); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(matchUpperLowerCaseCheckBox, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.insets = new java.awt.Insets(5, 0, 5, 0);
        jPanel3.add(jSeparator1, gridBagConstraints);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        sourceRadioButton.setSelected(true);
        sourceRadioButton.setText(rb.getString("GUI.Menu.Source")); // NOI18N
        sourceRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                sourceRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel4.add(sourceRadioButton, gridBagConstraints);

        targetRadioButton.setText(rb.getString("GUI.Menu.Target")); // NOI18N
        targetRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                targetRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel4.add(targetRadioButton, gridBagConstraints);

        categoryRadioButton.setText(rb.getString("GUI.Config.Categories")); // NOI18N
        categoryRadioButton.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        categoryRadioButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        categoryRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                categoryRadioButtonItemStateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        jPanel4.add(categoryRadioButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        jPanel3.add(jPanel4, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(10, 0, 0, 0);
        findPanel.add(jPanel3, gridBagConstraints);

        getContentPane().add(findPanel, java.awt.BorderLayout.CENTER);

        buttonPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 5, 1, 10));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        resetButton.setText(rb.getString("GUI.Find.Reset")); // NOI18N
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        buttonPanel.add(resetButton, gridBagConstraints);

        findButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/magnifier-left.png"))); // NOI18N
        findButton.setText(rb.getString("GUI.Menu.Find")); // NOI18N
        findButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        buttonPanel.add(findButton, gridBagConstraints);

        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/net/numericalchameleon/resources/icons/pix16x16/close.png"))); // NOI18N
        cancelButton.setText(rb.getString("GUI.General.Close")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        buttonPanel.add(cancelButton, gridBagConstraints);

        getContentPane().add(buttonPanel, java.awt.BorderLayout.EAST);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void categoryRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_categoryRadioButtonItemStateChanged
        switchit();
    }//GEN-LAST:event_categoryRadioButtonItemStateChanged

    private void targetRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_targetRadioButtonItemStateChanged
        switchit();
    }//GEN-LAST:event_targetRadioButtonItemStateChanged

    private void sourceRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_sourceRadioButtonItemStateChanged
        // Add your handling code here:
        switchit();
    }//GEN-LAST:event_sourceRadioButtonItemStateChanged

    private void findTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findTextFieldKeyReleased
      // Add your handling code here:
      if (evt.getKeyCode()==KeyEvent.VK_ENTER) {
          findButtonActionPerformed(null);
      } else
      if (evt.getKeyCode()==KeyEvent.VK_ESCAPE) {
          closeDialog(null);
      }
    }//GEN-LAST:event_findTextFieldKeyReleased

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        // Add your handling code here:
         findTextField.setText("");
         next = 0;
         findProgressBar.setValue(0);
         findTextField.requestFocus();
    }//GEN-LAST:event_resetButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        closeDialog(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void findButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findButtonActionPerformed

        int found = -1;
        Class myCast;
        if (categoryRadioButton.isSelected()) {
            myCast = Category.class;
        } else {
            myCast = Unit.class;
        }

        found = findDialogInterface.findEntry(myCast, box, findTextField.getText(), next, matchUpperLowerCaseCheckBox.isSelected());
        if ((found > -1)) {
            box.setSelectedIndex(found);
            findProgressBar.setValue(found);
            next=found+1;
        }
        else {
            findProgressBar.setValue(findProgressBar.getMaximum());
            String entryNotFound = categoryRadioButton.isSelected() ?
                    "Message.CategoryNotFound" : "GUI.Find.UnitNotFoundInThisCategory";
            String noFurtherEntry = categoryRadioButton.isSelected() ?
                    "GUI.Find.NoFurtherCategories" : "GUI.Find.NoFurtherUnits";
            JOptionPane.showMessageDialog(this, rb.getString(
               (next==0) ? entryNotFound : noFurtherEntry));
            next=0;
            findProgressBar.setValue(0);
        }
    }//GEN-LAST:event_findButtonActionPerformed

    /** Closes the dialog */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        setVisible(false);
        dispose();
    }//GEN-LAST:event_closeDialog


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JRadioButton categoryRadioButton;
    private javax.swing.JButton findButton;
    private javax.swing.JLabel findLabel;
    private javax.swing.JPanel findPanel;
    private javax.swing.JProgressBar findProgressBar;
    private javax.swing.JTextField findTextField;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JCheckBox matchUpperLowerCaseCheckBox;
    private javax.swing.JButton resetButton;
    private javax.swing.JRadioButton sourceRadioButton;
    private javax.swing.JRadioButton targetRadioButton;
    // End of variables declaration//GEN-END:variables

}
